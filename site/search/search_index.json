{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CSCS Documentation","text":"<p>CSCS (Custom Scripting in C#) is a scripting language implemented in C#.</p>"},{"location":"#what-is-cscs","title":"What is CSCS?","text":"<p>CSCS is designed to provide a flexible scripting solution that integrates seamlessly with .NET ecosystems.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// A simple CSCS script\na = 5;\nb = 10;\nresult = a + b;\nprint(\"The result is: \", result);\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with CSCS","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Download the latest CSCS interpreter from the releases page.</p>"},{"location":"getting-started/#your-first-script","title":"Your First Script","text":"<ol> <li>Create a file called <code>hello.cscs</code></li> <li>Add the following code:</li> </ol> <pre><code>print(\"Hello, CSCS!\");\n</code></pre>"},{"location":"introduction/","title":"CSCS","text":"<p>CSCS_WPF is a scripting programming language based on C# and WPF. Also, cscs_wpf is a completely 'event driven' language.</p> <p>The initial entry point is to create the first window with the create_window() function or, alternatively, with the directive '#WINFORM path/window_name.xaml' which should be specified at the beginning of the program. If there are several such directives, for example:</p> <pre><code>#winform window1.xaml\n#winform window2.xaml\n#winform window3.xaml\n</code></pre> <p>The initial window is the one listed first. Other xaml windows are used only for verification of XAML code.</p>"},{"location":"language-basics/","title":"CSCS Language Basics","text":""},{"location":"language-basics/#variables","title":"Variables","text":"<p>Variables in CSCS are dynamically typed:</p> <pre><code>name = \"John\";\nage = 25;\nheight = 5.9;\nisStudent = true;\n</code></pre>"},{"location":"overview/","title":"CSCS(Wpf) extended for TAS (Manual)","text":""},{"location":"overview/#heading-2-description-of-cscs","title":"Heading 2 - DESCRIPTION OF CSCS","text":"<p>CSCS (Customized Scripting in C#) is a scripting language framework, which is very easy to integrate into any C# project and adjust according to your needs. Basically, the concept of CSCS is not only a language, but also a framework that you can use to create your own language. Since the compiler will be inside of your project, you can do whatever you want with the language: add new features, modify existing ones, etc.</p> <ul> <li>The syntax is a mixture between C#, JavaScript, and Python.</li> <li>All statements must end with a semicolon \";\".</li> <li>Identation and new lines are not used in parsing (unlike Python).</li> <li>All CSCS variables have at least 3 properties that can be accessed using the dot notation: properties, type, size, and string.</li> <li>Variables and arrays are all defined implicitly, e.g. x=5, b[7]=11  An example of a list initialization: c = {\"aa\", \"bb\", \"xxx\"};  You can also define it explicitly: c[0]=\"aa\"; c[1]=\"bb\";  Definition in index form doesn't have to start from index 0, or even from the first dimension: not defined elements will have a type NONE. E.g.: b[5][3][5][3]=15;  Similarly, when defining dictionaries, e.g.: x[\"bla\"][\"blu\"]=\"wichtig\";</li> <li>Control flow statements if, else, while, for, try, etc., all require statements between the curly braces (even for a single statement).</li> <li>\"elif\" means \"else if\" (like in Python)</li> </ul>"},{"location":"reference/btrieve/","title":"BTRIEVE FUNCTIONS","text":""},{"location":"reference/btrieve/#openv","title":"OPENV","text":""},{"location":"reference/btrieve/#description","title":"Description","text":"<p>function to be used first for further database table reading and manipulation, it initializes the necessary stuff for Btrieve way of querying.</p>"}]}